{"mappings":";;;AAEA,yBAAM,CAAC,MAAM,EAAC,IAAI,IAAK,CAAC;QACpB,MAAM,EAAE,CAAK;QACb,OAAO,EAAE,CAAK;QACd,KAAK,EAAE,CAAC;YACJ,uBAAI,CAAC,MAAM,CAAC,CAAC;gBACT,IAAI,EAAE,CAAS;gBACf,OAAO,EAAE,CAAsB;gBAC/B,OAAO,EAAE,CAAC;oBAAA,CAAG;oBAAE,CAAiB;gBAAA,CAAC;gBACjC,WAAW,EAAE,CAAwE;gBACrF,OAAO,EAAE,CAAC;oBACN,yBAAM,CAAC,MAAM,CAAC,CAAC;wBACX,SAAS,EAAE,CAAG;wBACd,IAAI,EAAE,CAAa;wBACnB,WAAW,EAAE,CAAuC;oBACxD,CAAC;oBACD,yBAAM,CAAC,MAAM,CAAC,CAAC;wBACX,SAAS,EAAE,CAAG;wBACd,IAAI,EAAE,CAAQ;wBACd,WAAW,EAAE,CAAiC;oBAClD,CAAC;oBACD,yBAAM,CAAC,MAAM,CAAC,CAAC;wBACX,SAAS,EAAE,CAAG;wBACd,IAAI,EAAE,CAAO;wBACb,WAAW,EAAE,CAAuB;oBACxC,CAAC;gBACL,CAAC;gBACD,OAAO,EAAE,yBAAM,CAAC,CAAiE;YACrF,CAAC;QACL,CAAC;QACD,wBAAwB,MAAQ,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC7C,MAAM,EAAE,CAAS;gBACjB,MAAM,EAAE,CAAC;oBACL,CAAC;wBAAA,IAAI,EAAE,CAAS;wBAAE,IAAI,EAAE,CAAY;wBAAE,OAAO,EAAE,CAAS;wBAAE,IAAI,EAAE,CAAU;wBAAE,GAAG,EAAE,IAAI;oBAAA,CAAC;gBAC1F,CAAC;YACL,CAAC;;QACD,0BAA0B,MAAQ,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC/C,MAAM,EAAE,CAAS;gBACjB,MAAM,EAAE,CAAiC,gCAAC,CAA4B,AAA5B,EAA4B,AAA5B,0BAA4B;YAC1E,CAAC;;QACD,KAAK,GAAE,UAAU,GAAI,OAAO,CAAC,OAAO,CAAC,CAAC;gBAClC,MAAM,EAAE,CAAS;gBACjB,MAAM,EAAE,CAAsB;gBAC9B,MAAM,EAAE,CAAE;gBACV,SAAS,EAAE,CAAC,CAAC;YACjB,CAAC;IACL,CAAC;EAAG,OAAO,CAAC,IAAI","sources":["index.ts"],"sourcesContent":["import {Plugin, Task, Option, binary} from 'taqueria-sdk'\n\nPlugin.create(i18n => ({\n    schema: \"1.0\",\n    version: \"0.1\",\n    tasks: [\n        Task.create({\n            task: \"compile\",\n            command: \"compile [sourceFile]\",\n            aliases: [\"c\", \"compile-smartpy\"],\n            description: \"Compile a smart contract written in a SmartPy syntax to Michelson code\",\n            options: [\n                Option.create({\n                    shortFlag: \"e\",\n                    flag: \"entry-point\",\n                    description: \"The entry point that will be compiled\"\n                }),\n                Option.create({\n                    shortFlag: \"s\",\n                    flag: \"syntax\",\n                    description: \"The syntax used in the contract\"\n                }),\n                Option.create({\n                    shortFlag: \"i\",\n                    flag: \"infer\",\n                    description: \"Enable type inference\"\n                })\n            ],\n            handler: binary(\"ligo %entry-point% %syntax% %infer% %sourceFile% %contractsDir%\")\n        })\n    ],\n    checkRuntimeDependencies: () => Promise.resolve({\n        status: \"success\",\n        report: [\n            {name: \"SmartPy\", path: \"SmartPy.sh\", version: \">=0.8.4\", kind: \"required\", met: true}\n        ]\n    }),\n    installRunTimeDependencies: () => Promise.resolve({\n        status: \"success\",\n        output: \"Ligo was found in /usr/bin/ligo\" // TODO this should use i18n\n    }),\n    proxy: parsedArgs => Promise.resolve({\n        status: \"success\",\n        stdout: \"Proxied successfully\",\n        stderr: \"\",\n        artifacts: []\n    })\n}), process.argv)"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"/"}