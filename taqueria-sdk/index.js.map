{"mappings":"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","sources":["index.ts","types.ts"],"sourcesContent":["import {Task as aTask, Option as aOption, Binary, SchemaView, TaskView, OptionView, i18n, Args, ParsedArgs, RuntimeDependency, ActionResponse, pluginDefiner, LikeAPromise, Failure, UnvalidatedTask, UnvalidatedOption} from \"./types\"\nimport yargs from 'yargs'\n\nconst parseArgs = (unparsedArgs: Args): LikeAPromise<ParsedArgs, Failure<undefined>> => {\n    if (unparsedArgs && Array.isArray(unparsedArgs) && unparsedArgs.length >= 2) {\n        const argv = yargs(unparsedArgs.slice(2)).argv as unknown as ParsedArgs\n        if (argv.i18n && argv.taqRun) {\n            return Promise.resolve(argv)\n        }\n    }\n    return Promise.reject({\n        errCode: \"E_NO_ARGS\",\n        errMsg: \"Invalid usage. If you were testing your plugin, did you remember to specify --taqRun?\",\n        context: undefined\n    })\n}\n\nconst viewOption = ({shortFlag, flag, description}: aOption): OptionView => ({\n    shortFlag: shortFlag.value,\n    flag: flag.value,\n    description\n})\n\nconst viewTask = ({name, command, aliases, description, options, handler}: aTask): TaskView => ({\n    name: name.value,\n    command: command.value,\n    aliases: !aliases ? [] : aliases.reduce(\n        (retval: string[], alias) => alias ? [...retval, alias.value] : retval,\n        []\n    ),\n    description,\n    options: !options ? [] : options.reduce(\n        (retval: OptionView[], option: aOption | undefined) => option ? [...retval, viewOption(option)] : retval,\n        []\n    ),\n    handler\n})\n\nconst parseSchema = (i18n: i18n, definer: pluginDefiner): SchemaView | undefined => {\n    try {\n        const {schema, version, tasks, scaffolds, hooks, ...functions} = definer(i18n)\n\n        return {\n            schema,\n            version,\n            tasks: tasks.reduce(\n                (retval: TaskView[], task: aTask|undefined) => task ? [...retval, viewTask(task)] : retval,\n                []\n            ),\n            hooks: [],\n            scaffolds: [],\n            ...functions\n        }\n    }\n    catch (_) {\n        return undefined\n    }\n}\n\nconst sendResponse = (response: unknown) => console.log(JSON.stringify(response))\n\nconst sendError = (err: Failure<unknown>) => console.error(JSON.stringify(err))\n\nconst getResponse = (definer: pluginDefiner) => (parsedArgs: ParsedArgs): LikeAPromise<ActionResponse, Failure<[]>> => {\n    const {i18n, taqRun, ...args} = parsedArgs\n    const schema = parseSchema(i18n, definer)\n    switch (taqRun) {\n        case \"pluginInfo\":\n            return schema ? Promise.resolve({...schema, status: \"success\"}) : Promise.reject({err: \"E_INVALID_SCHEMA\", msg: \"The schema of the plugin is invalid.\"})\n        case \"proxy\":\n            return schema && schema.proxy\n                    ? schema.proxy(i18n, args as Record<string, unknown>)\n                    : Promise.resolve({status: \"notSupported\", stdout: \"\", stderr: i18n.proxyNotSupported, artifacts: []})\n        case \"checkRuntimeDependencies\":\n            return schema && schema.checkRuntimeDependencies\n                    ? schema.checkRuntimeDependencies(i18n, args as Record<string, unknown>)\n                    : Promise.resolve({status: \"notSupported\", report: []})\n        case \"installRuntimeDependencies\":\n            return schema && schema.installRuntimeDependencies\n                    ? schema.installRuntimeDependencies(i18n, args  as Record<string, unknown>)\n                    : Promise.resolve({status: \"notSupported\", report: []})\n        default:\n            return Promise.resolve({status: \"notSupported\", msg: i18n.actionNotSupported})\n\n    }\n}\n\nexport const binary = Binary.create\n\nexport const Plugin = {\n    create: (definer: pluginDefiner, unparsedArgs: Args) =>\n        parseArgs(unparsedArgs)\n        .then(getResponse(definer))\n        .then(sendResponse)\n        .catch(sendError)\n}\n\nexport const Task = {\n    create: (input: UnvalidatedTask) => aTask.create(input)\n}\n\nexport const Option = {\n    create: (input: UnvalidatedOption) => aOption.create(input)\n}\n\nexport default {\n    Plugin,\n    Task,\n    Option\n}","abstract class StringLike {\n    readonly value: string\n    protected constructor(value: string){\n        this.value = value\n    }\n}\n\ndeclare const verbType: unique symbol;\nexport class Verb extends StringLike {\n    [verbType]: void\n    static create(value: string): Verb | undefined {\n        const result = value.match(/^[A-Za-z-]+/)\n        // TODO - should we do more validation whether its a verb?\n        return result ? new Verb(result[0]) : undefined\n    }\n}\n\ndeclare const nounType: unique symbol;\nexport class Noun extends StringLike {\n    [nounType]: void\n    static create(value: string): Noun | undefined {\n        const result = value.match(/^[A-Za-z-]+/)\n        // TODO - should we do more validation whether its a verb?\n        return result ? new Noun(result[0]) : undefined\n    }\n}\n\ndeclare const nounWithVerbType: unique symbol\nexport class NounWithOneOrMoreVerbs extends StringLike {\n    [nounWithVerbType]: void\n    static create(value: string) : NounWithOneOrMoreVerbs | undefined {\n        const result = value.match(/^([A-Za-z-]+) (\\[[A-Za-z-]+\\] ?){1,}/)\n        if (result) {\n            const noun = Noun.create(result[0])\n            if (noun) {\n                // TODO need to extract pattern matches for verbs\n                return new NounWithOneOrMoreVerbs(noun.value)\n            }\n        }\n        return undefined\n    }\n}\n\ntype Command = Noun | NounWithOneOrMoreVerbs\n\ndeclare const singleChar: unique symbol\nexport class SingleChar extends StringLike {\n    [singleChar]: void\n    static create(value: string): SingleChar | undefined {\n        return value && value.toString().match(/^[A-Za-z]/)\n            ? new SingleChar(value[0])\n            : undefined\n    }\n}\n\ntype Alias = Noun | SingleChar\n\nexport const createAlias = (value: string): Alias | undefined => {\n    return Noun.create(value) || SingleChar.create(value)\n}\n\nexport interface UnvalidatedOption {\n    readonly shortFlag: string\n    readonly flag: string\n    readonly description: string\n}\n\ndeclare const optionType: unique symbol\nexport class Option {\n    [optionType]: void\n    readonly shortFlag: SingleChar\n    readonly flag: Verb\n    readonly description: string\n    private constructor(shortFlag: SingleChar, flag: Verb, description: string) {\n        this.shortFlag = shortFlag\n        this.flag = flag\n        this.description = description\n    }\n    static create(option: UnvalidatedOption): Option | undefined {\n        const shortFlag = SingleChar.create(option.shortFlag)\n        const flag = Verb.create(option.flag)\n\n        if (shortFlag && flag)\n            return new Option(shortFlag, flag, option.description)\n        \n            return undefined\n    }\n}\n\ndeclare const binaryType: unique symbol\nexport class Binary {\n    [binaryType]: void\n    readonly value: string\n    private constructor(path: string) {\n        this.value = path\n    }\n    static create(path: string): Binary {\n        return new Binary(path)\n    }\n}\n\nexport type TaskHandler = \"proxy\" | Binary\n\ntype UnvalidatedTaskOption = Option | undefined\n\nexport interface UnvalidatedTask {\n    readonly task: string,\n    readonly command: string,\n    readonly description: string,\n    readonly handler: TaskHandler\n    readonly aliases?: string[]\n    readonly options?: UnvalidatedTaskOption[]\n}\n\n\ndeclare const taskType: unique symbol\nexport class Task {\n    [taskType]: void\n    readonly name: Verb\n    readonly command: Command\n    readonly aliases?: Alias[]\n    readonly description: string\n    readonly options?: Option[]\n    readonly handler: TaskHandler\n    protected constructor(name: Verb, command: Command, description: string, handler: TaskHandler, options: Option[]=[], aliases: Alias[]=[]) {\n        this.name = name\n        this.command = command\n        this.description = description\n        this.handler = handler\n        this.options = options\n        this.aliases = aliases\n    }\n    static create(task: UnvalidatedTask): Task | undefined {\n        const name = Verb.create(task.task)\n        const command = Noun.create(task.command) || NounWithOneOrMoreVerbs.create(task.command)\n        const aliases = task.aliases ? task.aliases.map(createAlias).filter(alias => alias!= undefined) : []\n        const options = !task.options ? [] : task.options.reduce(\n            (retval: Option[], option: Option | undefined) => option ? [...retval, option] : retval,\n            []\n        )\n        return name && command && aliases && options\n            ? new Task(name, command, task.description, task.handler, options, aliases as Alias[])\n            : undefined\n    }\n}\n\nexport interface Scaffold {\n}\n\nexport interface Hook {\n\n}\n\nexport interface Failure<Params> {\n    readonly errorCode: string,\n    readonly errorMsg: string,\n    readonly context: Params\n}\n\nexport type LikeAPromise<Success, Failure> = Promise<Success>\n\nexport type PositiveInt = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15\n\nexport type i18nMessage = string | {message: string, numOfArguments: PositiveInt}\n\nexport interface i18n {\n    [key: string]: i18nMessage,\n    readonly actionNotSupported: string,\n    readonly proxyNotSupported: string\n}\n\nexport type Action = \"checkRuntimeDependencies\" | \"installRuntimeDependencies\" | \"proxy\" | \"pluginInfo\"\n\nexport interface RuntimeDependency {\n    readonly name: string,\n    readonly path: string,\n    readonly version: string,\n    readonly kind: \"required\" | \"optional\"\n}\n\nexport interface RuntimeDependencyReport extends RuntimeDependency {\n    readonly met: boolean\n}\n\nexport interface CheckRuntimeDependenciesAction {\n    readonly status: ActionResponseCode,\n    readonly report: RuntimeDependencyReport[]\n}\n\nexport interface InstallRuntimeDependenciesAction {\n    readonly status: ActionResponseCode,\n    readonly report: RuntimeDependencyReport[]\n}\n\nexport type ActionResponseCode = \"success\" | \"failed\" | \"notSupported\"\n\nexport type ActionNotSupported = {\n    readonly status: \"notSupported\",\n    readonly msg: string\n}\n\nexport interface ProxyAction {\n    readonly status: ActionResponseCode,\n    readonly stdout: string,\n    readonly stderr: string,\n    readonly artifacts: string[]\n}\n\nexport interface ActionPluginInfo extends SchemaView {\n    readonly status: ActionResponseCode,\n}\n\nexport type ActionResponse = ProxyAction | CheckRuntimeDependenciesAction | InstallRuntimeDependenciesAction | ActionPluginInfo | ActionNotSupported\n\nexport interface ScaffoldView {\n\n}\n\nexport interface HookView {\n\n}\n\nexport interface OptionView {\n    readonly shortFlag: string\n    readonly flag: string\n    readonly description: string\n}\n\nexport interface TaskView {\n    readonly name: string\n    readonly command: string\n    readonly aliases: string[]\n    readonly description: string\n    readonly options?: OptionView[]\n    readonly handler: TaskHandler\n}\n\nexport interface Schema {\n    readonly schema: string,\n    readonly version: string,\n    readonly tasks: [Task|undefined],\n    readonly scaffolds?: [Scaffold|undefined],\n    readonly hooks?: [Hook|undefined]\n    checkRuntimeDependencies?: <T>(i18n: i18n, parsedArgs: Record<string, unknown>) => LikeAPromise<ActionResponse, Failure<T>>,\n    installRuntimeDependencies?: <T>(i18n: i18n, parsedargs: Record<string, unknown>) => LikeAPromise<ActionResponse, Failure<T>>,\n    proxy?: <T>(i18n: i18n, parsedArgs: Record<string, unknown>) => LikeAPromise<ActionResponse, Failure<T>>,\n}\n\nexport interface SchemaView {\n    readonly schema: string,\n    readonly version: string,\n    readonly tasks: TaskView[],\n    readonly scaffolds: ScaffoldView[],\n    readonly hooks: HookView[],\n    checkRuntimeDependencies?: <T>(i18n: i18n, parsedArgs: Record<string, unknown>) => LikeAPromise<ActionResponse, Failure<T>>,\n    installRuntimeDependencies?: <T>(i18n: i18n, parsedargs: Record<string, unknown>) => LikeAPromise<ActionResponse, Failure<T>>,\n    proxy?: <T>(i18n: i18n, parsedArgs: Record<string, unknown>) => LikeAPromise<ActionResponse, Failure<T>>\n}\n\nexport type Args = string[]\n\nexport type ParsedArgs = {\n    i18n: i18n,\n    taqRun: Action\n}\n\nexport type pluginDefiner = (i18n: i18n) => Schema"],"names":[],"version":3,"file":"index.js.map"}