on:
  push:
      branches:
          - main
  pull_request:
      branches:
          - main
jobs:
  # Builds the 'taq' binary on Linux and MacOS
  build-binaries:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node: [16]
    runs-on: ${{ matrix.os }}
    env:
      DENO_DIR: ./.deno
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: lts/gallium
          cache: "npm"
          
      - uses: denoland/setup-deno@v1

      - name: Restore Deno Cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno-lock.json') }}

      - name: Build Binaries
        run: |
          npm ci
          npm run build-types
          npm run build:binary
          
      - name: Save Deno Cache
        uses: actions/cache/save@v3
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno-lock.json') }}

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: taq-${{ matrix.os }}
          path: taq

      - name: Create archive of work
        if: ${{ matrix.os == 'ubuntu-latest' }}
        # We need to ignore the exit code of tar because it will exit with 1 if
        # a file is being written to while tar is trying to read it. This is
        # expected behavior and we don't want to fail the build because of it.
        run: |
          set +e
          tar -czpf work.tar.gz .
          exitcode=$?
          if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
            exit $exitcode
          fi
          set -e

      - name: Store work
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: work-${{ matrix.os }}
          path: work.tar.gz
          retention-days: 1

  list-unit-tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set matrix for next job
        run: echo "matrix={\"spec\":[\"*\"]}" >> "$GITHUB_ENV"

  list-e2e-tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List .spec.ts files
        id: list
        run: echo "files=$(ls tests/e2e/*.spec.ts | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_ENV"

      - name: Set matrix for next job
        id: set-matrix
        run: echo "matrix={\"spec\":${{ env.files }}" >> "$GITHUB_ENV"

  list-integration-tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List .spec.ts files
        id: list
        run: echo "files=$(ls tests/integration/*.spec.ts | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_ENV"

      - name: Set matrix for next job
        id: set-matrix
        run: echo "matrix={\"spec\":${{ env.files }}" >> "$GITHUB_ENV"

  run-unit-tests:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: lts/gallium

      - uses: denoland/setup-deno@v1

      - name: Download work archive
        uses: actions/download-artifact@v2
        with:
          name: work-ubuntu-latest
          path: .

      - name: Extract work archive
        run: tar -xzpf work.tar.gz

      - name: Generate tree
        run: |
          python - << END
          import os
  
          def print_tree(directory, prefix=''):
              # Ensure the directory exists
              if not os.path.isdir(directory):
                  return
  
              # List the contents of the directory
              contents = os.listdir(directory)
  
              # Separate the contents into files and directories
              files = [f for f in contents if os.path.isfile(os.path.join(directory, f))]
              dirs = [d for d in contents if os.path.isdir(os.path.join(directory, d))]
  
              # Print the directories
              for i, subdir in enumerate(dirs):
                  if i == len(dirs) - 1 and len(files) == 0:
                      print(f'{prefix}└── {subdir}/')
                      if subdir != 'node_modules' or directory != '.':
                          print_tree(os.path.join(directory, subdir), prefix + '    ')
                  else:
                      print(f'{prefix}├── {subdir}/')
                      if subdir != 'node_modules' or directory != '.':
                          print_tree(os.path.join(directory, subdir), prefix + '│   ')
  
              # Print the files
              for i, filename in enumerate(files):
                  if os.path.islink(os.path.join(directory, filename)):
                      print(f'{prefix}├── {filename}@')
                  else:
                      print(f'{prefix}├── {filename}')
  
          # Call the function on the current directory
          print_tree('.')
          END
  
      - name: Run tests
        env:
          HUSKY_SKIP_INSTALL: 1
          HUSKY: 0
          npm_config_loglevel: silly
        run: |
          CWD=$(pwd)
          export PATH=$PATH:$CWD
          export DENO_DIR=$CWD/.deno
          npm run test:unit -w tests

  # run-integration-tests:
  #   needs:
  #     - list-integration-tests
  #     - build-binaries
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{fromJson(needs.list-integration-tests.outputs.matrix)}}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: lts/gallium

  #     - name: Download work archive
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: work-ubuntu-latest
  #         path: ${{ runner.temp }}/work.tar.gz
        
  #     - name: Restore work directory
  #       run: tar -xzf ${{ runner.temp }}/work.tar.gz

  #     - name: Run tests
  #       env:
  #         PATH: ${{ github.workspace }}/taq:$PATH
  #       run: npm ci && npm run test:e2e -w tests ${{ matrix.spec }}        

  # run-e2e-tests:
  #   needs:
  #     - list-e2e-tests
  #     - build-binaries
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{fromJson(needs.list-e2e-tests.outputs.matrix)}}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: lts/gallium

  #     - name: Download work archive
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: work-ubuntu-latest
  #         path: ${{ runner.temp }}/work.tar.gz
      
  #     - name: Restore work directory
  #       run: tar -xzf ${{ runner.temp }}/work.tar.gz

  #     - name: Run tests
  #       env:
  #         PATH: ${{ github.workspace }}/taq:$PATH
  #       run: npm ci && npm run test:e2e -w tests ${{ matrix.spec }}