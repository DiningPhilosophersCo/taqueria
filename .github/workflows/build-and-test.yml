on:
  push:
      branches:
          - main
  pull_request:
      branches:
          - main
jobs:
  # Builds the 'taq' binary on Linux and MacOS. Then create an archive of the work we've done and store it as an artifact to use in later jobs.
  build-binaries:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node: [16]
    runs-on: ${{ matrix.os }}
    env:
      DENO_DIR: ./.deno
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: lts/gallium
          cache: "npm"
          
      - uses: denoland/setup-deno@v1

      - name: Restore Deno Cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno-lock.json') }}

      - name: Build Binaries
        run: |
          npm ci
          npm run build-types
          npm run build:binary
          
      - name: Save Deno Cache
        uses: actions/cache/save@v3
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno-lock.json') }}

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: taq-${{ matrix.os }}
          path: taq

      - name: Create archive of work
        if: ${{ matrix.os == 'ubuntu-latest' }}
        # We need to ignore the exit code of tar because it will exit with 1 if
        # a file is being written to while tar is trying to read it. This is
        # expected behavior and we don't want to fail the build because of it.
        run: |
          set +e
          tar -czpf work.tar.gz .
          exitcode=$?
          if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
            exit $exitcode
          fi
          set -e

      - name: Store work
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: work-${{ matrix.os }}
          path: work.tar.gz
          retention-days: 1

  # Builds all NPM packages. Then update the archive of the work we've done and store it as an artifact to use in later jobs.
  build-packages:
      needs: build-binaries
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2

        - uses: actions/setup-node@v3
          with:
            node-version: lts/gallium
            cache: "npm"
            
        - uses: denoland/setup-deno@v1

        - name: Download work archive
          uses: actions/download-artifact@v2
          with:
            name: work-ubuntu-latest
            path: .

        - name: Extract work archive
          run: tar -xzpf work.tar.gz

        - name: Build packages
          run: npm run build:packages

        - name: Get VSIX
          id: vsix
          run: echo "artifact=$(ls taqueria-vscode-extension/*.vsix)" >> "$GITHUB_OUTPUT"

        - name: Upload VSCode Extension
          uses: actions/upload-artifact@v2
          with:
            name: taqueria.vsix
            path: ${{ steps.vsix.outputs.artifact }}

        - name: Create archive of work
          # We need to ignore the exit code of tar because it will exit with 1 if
          # a file is being written to while tar is trying to read it. This is
          # expected behavior and we don't want to fail the build because of it.
          run: |
            set +e
            tar -czpf work.tar.gz .
            exitcode=$?
            if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
              exit $exitcode
            fi
            set -e

        - name: Store work
          uses: actions/upload-artifact@v2
          with:
            name: work-ubuntu-latest
            path: work.tar.gz
            retention-days: 1

  # Check the files to decide if publish-packages job should run
  check_run_job:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_files.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: Check for changed files
        id: check_files
        run: |
          echo "::set-output name=should_run::$(git diff --name-only HEAD~1..HEAD | grep -E '^(taqueria|tests|.*\.ts)$' | wc -l)"
        shell: bash

  # Publish NPM packages to Github Packages
  publish-packages:
    needs: [build-packages, check_run_job]
    if: needs.check_run_job.outputs.should_run > 0
    runs-on: ubuntu-latest
    steps:
      - name: Download work archive
        uses: actions/download-artifact@v2
        with:
          name: work-ubuntu-latest
          path: .

      - name: Extract work archive
        run: tar -xzpf work.tar.gz

      - uses: actions/setup-node@v3
        with:
          node-version: lts/gallium
          cache: "npm"
           
      # Publish packages
      - name: Publish to npm
        run: |
          export HUSKY=0
          rm work.tar.gz
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          git config --global user.email "mweichert@gmail.com"
          git config --global user.name "Michael Weichert"
          git commit -am "chore: publish packages"
          npx lerna publish from-package --no-push --yes --dist-tag dev
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Add comment with published artifacts and packages
  update-comment:
    if: github.event.pull_request || github.event.issue
    needs: publish-packages
    runs-on: ubuntu-latest
    steps: 
      - name: Download work archive
        uses: actions/download-artifact@v2
        with:
          name: work-ubuntu-latest
          path: .
  
      - name: Extract work archive
        run: tar -xzpf work.tar.gz
  
      - name: Get version
        id: get_version
        run: |
          echo "::set-output name=VERSION::$(node -p "require('./package.json').version")"
  
      - name: List Lerna Packages
        id: list_packages
        run: |
          echo "::set-output name=PACKAGES::"$(npx lerna ls --json --all | jq -r '.[] | select(.private == false) | "\(.name) \(.version)"' | tr '\n' ',' | sed 's/,$//')
          
      - name: Update or Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number || github.event.issue.number }}
          body: |
            ## Published Binaries & Packages
  
            | Published | Version |
            | :--- | :--- |
            | Taq Binary (MacOS) | [${{ steps.get_version.outputs.VERSION }}](https://github.com/${{ github.repository }}/actions/artifacts) |
            | Taq Binary (Windows) | [${{ steps.get_version.outputs.VERSION }}](https://github.com/${{ github.repository }}/actions/artifacts) |
            | VSIX for VSCode Extension | [${{ steps.get_version.outputs.VERSION }}](https://github.com/${{ github.repository }}/actions/artifacts) |
            ${{ steps.list_packages.outputs.PACKAGES }}
            <!-- Add more rows for additional packages -->
  
            > Note: You can install the latest development version of a package with `taq install @taqueria/[packageName]@dev`.
  
          edit-mode: replace

  list-e2e-tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List .spec.ts files
        id: list
        run: echo "files=$(ls tests/e2e/*.spec.ts | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"

      - name: Set matrix for next job
        id: set-matrix
        run: echo 'matrix={"spec":${{ steps.list.outputs.files }}}' >> "$GITHUB_OUTPUT"

      - name: Debug
        run: echo ${{fromJson(steps.set-matrix.outputs.matrix)}}

  run-e2e-tests:
    needs:
      - list-e2e-tests
      - build-packages
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.list-e2e-tests.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: lts/gallium

      - name: Download work archive
        uses: actions/download-artifact@v2
        with:
          name: work-ubuntu-latest
          path: .

      - name: Extract work archive
        run: tar -xzpf work.tar.gz

      - name: Run tests
        env:
          HUSKY_SKIP_INSTALL: 1
          HUSKY: 0
        run: |
          CWD=$(pwd)
          export PATH=$PATH:$CWD
          npm run test:e2e -w tests ${{ matrix.spec }}

  list-integration-tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: List .spec.ts files
        id: list
        run: echo "files=$(ls tests/integration/*.spec.ts | jq -R -s -c 'split("\n")[:-1]')" >> "$GITHUB_OUTPUT"

      - name: Set matrix for next job
        id: set-matrix
        run: echo 'matrix={"spec":${{ steps.list.outputs.files }}}' >> "$GITHUB_OUTPUT"

      - name: Debug
        run: echo ${{fromJson(steps.set-matrix.outputs.matrix)}}

  run-integration-tests:
    needs:
      - list-integration-tests
      - build-packages
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.list-integration-tests.outputs.matrix)}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: lts/gallium

      - name: Download work archive
        uses: actions/download-artifact@v2
        with:
          name: work-ubuntu-latest
          path: .

      - name: Extract work archive
        run: tar -xzpf work.tar.gz

      - name: Run tests
        env:
          HUSKY_SKIP_INSTALL: 1
          HUSKY: 0
        run: |
          CWD=$(pwd)
          export PATH=$PATH:$CWD
          npm run test:integration -w tests ${{ matrix.spec }}

  # Run all unit tests
  run-unit-tests:
    needs:
      - build-binaries
      - build-packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: lts/gallium

      - uses: denoland/setup-deno@v1

      - name: Download work archive
        uses: actions/download-artifact@v2
        with:
          name: work-ubuntu-latest
          path: .

      - name: Extract work archive
        run: tar -xzpf work.tar.gz

      - name: Run tests
        env:
          HUSKY_SKIP_INSTALL: 1
          HUSKY: 0
          npm_config_loglevel: silly
        run: |
          CWD=$(pwd)
          export PATH=$PATH:$CWD
          export DENO_DIR=$CWD/.deno
          npm run test:unit -w tests     